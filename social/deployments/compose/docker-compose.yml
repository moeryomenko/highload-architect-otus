version: '3.9'

services:
  mysql-master:
    image: mysql:8.0
    container_name: mysql-master
    env_file: ./.env
    cap_add:
      - all
    volumes:
      - ./master/my.cnf:/etc/mysql/my.cnf
      - ./master/mysql:/docker-entrypoint-initdb.d
      - ./master/data:/var/lib/mysql-files
    networks:
      local:
        aliases:
          - mysql
    healthcheck:
      test: "mysqladmin ping -h localhost"
      interval: 20s
      timeout: 5s
      retries: 10

  mysql-slave1:
    image: mysql:8.0
    container_name: mysql-slave1
    env_file: ./.env
    cap_add:
      - all
    volumes:
      - ./slave1/my.cnf:/etc/mysql/my.cnf
      - ./slave1/mysql:/docker-entrypoint-initdb.d
      - ./slave1/data:/var/lib/mysql-files
    networks:
      local:
        aliases:
          - mysql
    healthcheck:
      test: "mysqladmin ping -h localhost"
      interval: 20s
      timeout: 5s
      retries: 10

  mysql-slave2:
    image: mysql:8.0
    container_name: mysql-slave2
    env_file: ./.env
    cap_add:
      - all
    volumes:
      - ./slave2/my.cnf:/etc/mysql/my.cnf
      - ./slave2/mysql:/docker-entrypoint-initdb.d
      - ./slave2/data:/var/lib/mysql-files
    networks:
      local:
        aliases:
          - mysql
    healthcheck:
      test: "mysqladmin ping -h localhost"
      interval: 20s
      timeout: 5s
      retries: 10

  haproxy:
    build:
      context: ./.
      dockerfile: Dockerfile
    container_name: mysql
    restart: unless-stopped
    ports:
      - "2999:2999"
      - "3306:3306"
    cap_add:
      - all
    volumes:
      - ./haproxy.cfg:/etc/haproxy/haproxy.cfg
    networks:
      local:
        aliases:
          - mysql
    depends_on:
      mysql-master:
        condition: service_healthy
      mysql-slave1:
        condition: service_healthy
      mysql-slave2:
        condition: service_healthy

  migrations:
    container_name: migrations
    image: migrate/migrate
    volumes:
      - ../../migrations:/migrations
    command:
      [ "-path", "/migrations", "-database", "mysql://social:test@tcp(haproxy:3306)/social", "up" ]
    networks:
      - local
    depends_on:
      - haproxy

  load-balancer:
    container_name: nginx
    image: moeryomenko/ngxjs
    ports:
      - 8080:80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - local
    depends_on:
      - social

  social:
    restart: always
    build:
      context: ../..
      dockerfile: Dockerfile
    env_file: ./.env
    deploy:
      replicas: 3
    networks:
      - local
    depends_on:
      migrations:
        condition: service_completed_successfully

networks:
  local:
    name: local
